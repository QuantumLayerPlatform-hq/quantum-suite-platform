# Default values for qlens
global:
  imageRegistry: ghcr.io
  imageRepository: quantum-suite/qlens
  imagePullSecrets:
    - name: ghcr-secret
  
  # Common labels applied to all resources
  commonLabels:
    app.kubernetes.io/part-of: quantum-suite
    app.kubernetes.io/managed-by: helm

# Environment
environment: staging
namespace: staging

# Replica counts
replicaCount:
  gateway: 2
  router: 2
  cache: 1

# Image configuration
image:
  pullPolicy: IfNotPresent
  tag: ""  # Overridden by CI/CD with commit SHA

# Service configuration
service:
  type: ClusterIP
  ports:
    gateway: 8105
    router: 8106
    cache: 8107

# Provider configuration
providers:
  azureOpenAI:
    enabled: true
    endpoint: ""  # Set via secrets
    apiVersion: "2024-02-15-preview"
    deployments:
      gpt4: "gpt-4"
      gpt35: "gpt-35-turbo"
      gpt4Turbo: "gpt-4-turbo"
      embedding: "text-embedding-ada-002"
    models:
      - id: "gpt-4"
        deployment: "gpt-4"
        contextLength: 8192
        cost:
          input: 0.03  # per 1K tokens
          output: 0.06
      - id: "gpt-3.5-turbo"
        deployment: "gpt-35-turbo"
        contextLength: 4096
        cost:
          input: 0.0015
          output: 0.002
      - id: "text-embedding-ada-002"
        deployment: "text-embedding-ada-002"
        contextLength: 8192
        cost:
          input: 0.0001
          output: 0
  
  awsBedrock:
    enabled: true
    region: "us-east-1"
    models:
      - id: "claude-3-sonnet"
        modelId: "anthropic.claude-3-sonnet-20240229-v1:0"
        contextLength: 200000
        cost:
          input: 0.003  # per 1K tokens
          output: 0.015
      - id: "claude-3-haiku"
        modelId: "anthropic.claude-3-haiku-20240307-v1:0"
        contextLength: 200000
        cost:
          input: 0.00025
          output: 0.00125

# Authentication configuration
auth:
  enabled: true
  type: "jwt"  # jwt or basic
  jwt:
    issuer: "https://auth.quantum-suite.com"
    audience: "qlens-api"
    jwksUrl: "https://auth.quantum-suite.com/.well-known/jwks.json"
  basic:
    enabled: false  # For development only

# Rate limiting
rateLimit:
  enabled: true
  global:
    requestsPerMinute: 1000
    tokensPerHour: 100000
  perTenant:
    requestsPerMinute: 100
    tokensPerHour: 10000
  perUser:
    requestsPerMinute: 50
    tokensPerHour: 5000

# Cache configuration
cache:
  enabled: true
  type: "memory"  # memory or redis
  ttl: "15m"
  maxSize: 10000
  redis:
    host: ""
    port: 6379
    database: 0
    tls: false
    password: ""

# Security settings
security:
  networkPolicy:
    enabled: true
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      drop:
        - ALL

# Resource configuration
resources:
  gateway:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  router:
    requests:
      cpu: 300m
      memory: 512Mi
    limits:
      cpu: 2000m
      memory: 2Gi
  cache:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 1Gi

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: qlens.local
      paths:
        - path: /
          pathType: Prefix
          service: gateway
  tls: []

# Monitoring configuration
monitoring:
  enabled: true
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      scrapeTimeout: 10s
  grafana:
    enabled: false
    dashboards:
      enabled: true

# Logging configuration
logging:
  level: "info"  # debug, info, warn, error
  format: "json"  # json or text
  structured: true

# Health checks
healthChecks:
  liveness:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readiness:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Cost controls
costControls:
  enabled: true
  dailyLimits:
    total: 100  # USD
    perTenant: 10
    perUser: 5
  alertThresholds:
    - 50   # 50% of daily limit
    - 75   # 75% of daily limit
    - 90   # 90% of daily limit
  providers:
    preferenceOrder:
      - azure-openai  # Cheapest for most requests
      - aws-bedrock   # Use for complex reasoning
    costOptimization:
      enabled: true
      routeByComplexity: true

# External secrets (for production)
externalSecrets:
  enabled: false
  backend: "azureKeyVault"  # azureKeyVault, awsSecretsManager, vault
  refreshInterval: "1h"
  azureKeyVault:
    vaultUrl: ""
    tenantId: ""
    clientId: ""
  awsSecretsManager:
    region: ""
    roleArn: ""

# Istio configuration
istio:
  enabled: false
  virtualService:
    enabled: true
    gateways:
      - istio-system/qlens-gateway
    timeout: 60s
    retries:
      attempts: 3
      perTryTimeout: 20s
  destinationRule:
    enabled: true
    trafficPolicy:
      loadBalancer:
        simple: LEAST_CONN
      connectionPool:
        tcp:
          maxConnections: 100
        http:
          http1MaxPendingRequests: 50
          maxRequestsPerConnection: 2
      circuitBreaker:
        consecutiveGatewayFailures: 5
        interval: 30s
        baseEjectionTime: 30s

# Node selector and tolerations
nodeSelector: {}
tolerations: []
affinity: {}

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

# Labels
podLabels: {}

# Secrets (will be overridden by CI/CD or external secrets)
secrets:
  azureOpenAI:
    endpoint: ""
    apiKey: ""
  awsBedrock:
    region: "us-east-1"
    accessKeyId: ""
    secretAccessKey: ""
    sessionToken: ""  # Optional, for temporary credentials