name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_GATEWAY: ${{ github.repository }}/qlens-gateway
  IMAGE_NAME_ROUTER: ${{ github.repository }}/qlens-router  
  IMAGE_NAME_CACHE: ${{ github.repository }}/qlens-cache

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run vet
      run: go vet ./...

    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      run: staticcheck ./...

    - name: Install golint
      run: go install golang.org/x/lint/golint@latest

    - name: Run golint
      run: golint ./...

    - name: Run tests
      run: go test -v -race -buildvcs -coverprofile=coverage.out ./...

    - name: Run integration tests
      run: go test -v -tags=integration ./tests/integration/...
      env:
        INTEGRATION_TEST: "true"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Coverage: ${COVERAGE}%"
        if [ $(echo "${COVERAGE} < 80.0" | bc -l) -eq 1 ]; then
          echo "Coverage ${COVERAGE}% is below minimum 80%"
          exit 1
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: gosec -fmt json -out gosec-report.json -stdout ./...

    - name: Upload Gosec report
      uses: actions/upload-artifact@v4
      with:
        name: gosec-report
        path: gosec-report.json

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        service: [gateway, router, cache]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/qlens-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./cmd/services/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  helm-lint:
    name: Helm Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Lint Helm charts
      run: helm lint charts/qlens

    - name: Template Helm charts (staging)
      run: helm template qlens charts/qlens -f charts/qlens/values-staging.yaml

    - name: Template Helm charts (production)  
      run: helm template qlens charts/qlens -f charts/qlens/values-production.yaml

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, helm-lint]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: '1.28.0'

    - name: Configure kubectl for staging
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Create namespace if not exists
      run: kubectl create namespace qlens-staging --dry-run=client -o yaml | kubectl apply -f -

    - name: Create Azure OpenAI secrets
      run: |
        kubectl create secret generic qlens-secrets \
          --from-literal=azure-openai-endpoint="${{ secrets.STAGING_AZURE_OPENAI_ENDPOINT }}" \
          --from-literal=azure-openai-api-key="${{ secrets.STAGING_AZURE_OPENAI_API_KEY }}" \
          --namespace=qlens-staging \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Create AWS Bedrock secrets
      run: |
        kubectl create secret generic aws-bedrock-secrets \
          --from-literal=aws-region="${{ secrets.STAGING_AWS_REGION }}" \
          --from-literal=aws-access-key-id="${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}" \
          --from-literal=aws-secret-access-key="${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}" \
          --namespace=qlens-staging \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to staging
      run: |
        helm upgrade --install qlens charts/qlens \
          --namespace qlens-staging \
          --values charts/qlens/values-staging.yaml \
          --set image.tag=${{ github.sha }} \
          --set image.registry=${{ env.REGISTRY }} \
          --wait --timeout=5m

    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=qlens --timeout=300s -n qlens-staging
        kubectl get pods -n qlens-staging
        
        # Test gateway endpoint
        kubectl port-forward svc/qlens-gateway 8080:8080 -n qlens-staging &
        sleep 5
        curl -f http://localhost:8080/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: '1.28.0'

    - name: Configure kubectl for production
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Create namespace if not exists
      run: kubectl create namespace qlens-production --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to production
      run: |
        helm upgrade --install qlens charts/qlens \
          --namespace qlens-production \
          --values charts/qlens/values-production.yaml \
          --set image.tag=${{ github.ref_name }} \
          --set image.registry=${{ env.REGISTRY }} \
          --wait --timeout=10m

    - name: Run production health checks
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=qlens --timeout=600s -n qlens-production
        kubectl get pods -n qlens-production
        
        # Test production endpoint via ingress
        sleep 30
        curl -f https://qlens.quantumlayer.ai/health || exit 1

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy-staging.result == 'success' && (needs.deploy-production.result == 'success' || needs.deploy-production.result == 'skipped')
      run: |
        echo "Deployment successful!"
        # Add notification logic here (Slack, email, etc.)

    - name: Notify on failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: |
        echo "Deployment failed!"
        # Add notification logic here (Slack, email, etc.)
        exit 1