apiVersion: v1
kind: Namespace
metadata:
  name: quantum-system
  labels:
    name: quantum-system
    app.kubernetes.io/part-of: quantum-suite

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: qlens-config
  namespace: quantum-system
  labels:
    app.kubernetes.io/name: qlens
    app.kubernetes.io/component: llm-gateway
    app.kubernetes.io/part-of: quantum-suite
data:
  QLENS_PORT: "8105"
  GIN_MODE: "release"
  LOG_LEVEL: "info"
  # Caching configuration
  CACHE_ENABLED: "true"
  CACHE_TTL: "15m"
  CACHE_MAX_SIZE: "10000"
  # Observability
  METRICS_ENABLED: "true"
  TRACING_ENABLED: "false"
  # Timeout and retry configuration
  DEFAULT_TIMEOUT: "30s"
  MAX_RETRIES: "3"
  RETRY_BACKOFF: "1s"

---
apiVersion: v1
kind: Secret
metadata:
  name: qlens-secrets
  namespace: quantum-system
  labels:
    app.kubernetes.io/name: qlens
    app.kubernetes.io/component: llm-gateway
    app.kubernetes.io/part-of: quantum-suite
type: Opaque
data:
  # These should be base64 encoded secrets
  # Example: echo -n "your-openai-key" | base64
  OPENAI_API_KEY: ""  # Replace with your base64 encoded OpenAI API key
  ANTHROPIC_API_KEY: ""  # Replace with your base64 encoded Anthropic API key (optional)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qlens
  namespace: quantum-system
  labels:
    app.kubernetes.io/name: qlens
    app.kubernetes.io/component: llm-gateway
    app.kubernetes.io/part-of: quantum-suite
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: qlens
      app.kubernetes.io/component: llm-gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qlens
        app.kubernetes.io/component: llm-gateway
        app.kubernetes.io/part-of: quantum-suite
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8105"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: qlens
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: qlens
        image: ghcr.io/quantum-suite/qlens:latest  # Replace with your registry
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8105
          protocol: TCP
        env:
        - name: QLENS_PORT
          valueFrom:
            configMapKeyRef:
              name: qlens-config
              key: QLENS_PORT
        - name: GIN_MODE
          valueFrom:
            configMapKeyRef:
              name: qlens-config
              key: GIN_MODE
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: qlens-config
              key: LOG_LEVEL
        - name: CACHE_ENABLED
          valueFrom:
            configMapKeyRef:
              name: qlens-config
              key: CACHE_ENABLED
        - name: CACHE_TTL
          valueFrom:
            configMapKeyRef:
              name: qlens-config
              key: CACHE_TTL
        - name: CACHE_MAX_SIZE
          valueFrom:
            configMapKeyRef:
              name: qlens-config
              key: CACHE_MAX_SIZE
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: qlens-config
              key: METRICS_ENABLED
        - name: TRACING_ENABLED
          valueFrom:
            configMapKeyRef:
              name: qlens-config
              key: TRACING_ENABLED
        - name: DEFAULT_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: qlens-config
              key: DEFAULT_TIMEOUT
        - name: MAX_RETRIES
          valueFrom:
            configMapKeyRef:
              name: qlens-config
              key: MAX_RETRIES
        - name: RETRY_BACKOFF
          valueFrom:
            configMapKeyRef:
              name: qlens-config
              key: RETRY_BACKOFF
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: qlens-secrets
              key: OPENAI_API_KEY
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: qlens-secrets
              key: ANTHROPIC_API_KEY
              optional: true
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: qlens
  namespace: quantum-system
  labels:
    app.kubernetes.io/name: qlens
    app.kubernetes.io/component: llm-gateway
    app.kubernetes.io/part-of: quantum-suite
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8105"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8105
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: qlens
    app.kubernetes.io/component: llm-gateway

---
apiVersion: v1
kind: Service
metadata:
  name: qlens-headless
  namespace: quantum-system
  labels:
    app.kubernetes.io/name: qlens
    app.kubernetes.io/component: llm-gateway
    app.kubernetes.io/part-of: quantum-suite
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 8105
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: qlens
    app.kubernetes.io/component: llm-gateway

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: qlens
  namespace: quantum-system
  labels:
    app.kubernetes.io/name: qlens
    app.kubernetes.io/component: llm-gateway
    app.kubernetes.io/part-of: quantum-suite

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: qlens
  labels:
    app.kubernetes.io/name: qlens
    app.kubernetes.io/component: llm-gateway
    app.kubernetes.io/part-of: quantum-suite
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: qlens
  labels:
    app.kubernetes.io/name: qlens
    app.kubernetes.io/component: llm-gateway
    app.kubernetes.io/part-of: quantum-suite
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: qlens
subjects:
- kind: ServiceAccount
  name: qlens
  namespace: quantum-system

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: qlens
  namespace: quantum-system
  labels:
    app.kubernetes.io/name: qlens
    app.kubernetes.io/component: llm-gateway
    app.kubernetes.io/part-of: quantum-suite
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: qlens
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qlens
  namespace: quantum-system
  labels:
    app.kubernetes.io/name: qlens
    app.kubernetes.io/component: llm-gateway
    app.kubernetes.io/part-of: quantum-suite
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qlens
      app.kubernetes.io/component: llm-gateway

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: qlens
  namespace: quantum-system
  labels:
    app.kubernetes.io/name: qlens
    app.kubernetes.io/component: llm-gateway
    app.kubernetes.io/part-of: quantum-suite
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: qlens
      app.kubernetes.io/component: llm-gateway
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: quantum-services
    - namespaceSelector:
        matchLabels:
          name: quantum-monitoring
    - namespaceSelector:
        matchLabels:
          name: quantum-system
    ports:
    - protocol: TCP
      port: 8105
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow HTTPS to external APIs (OpenAI, Anthropic, etc.)
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow HTTP to external APIs (if needed)
  - to: []
    ports:
    - protocol: TCP
      port: 80
  # Allow communication with other services in quantum namespaces
  - to:
    - namespaceSelector:
        matchLabels:
          name: quantum-data
    - namespaceSelector:
        matchLabels:
          name: quantum-system
    - namespaceSelector:
        matchLabels:
          name: quantum-services