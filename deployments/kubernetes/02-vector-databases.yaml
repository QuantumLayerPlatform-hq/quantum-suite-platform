apiVersion: v1
kind: Service
metadata:
  name: qdrant
  namespace: quantum-data
  labels:
    app: qdrant
    component: vector-db
spec:
  selector:
    app: qdrant
  ports:
    - port: 6333
      targetPort: 6333
      name: http
    - port: 6334
      targetPort: 6334
      name: grpc
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: qdrant
  namespace: quantum-data
  labels:
    app: qdrant
    component: vector-db
spec:
  serviceName: qdrant
  replicas: 1
  selector:
    matchLabels:
      app: qdrant
  template:
    metadata:
      labels:
        app: qdrant
    spec:
      containers:
      - name: qdrant
        image: qdrant/qdrant:v1.7.4
        ports:
        - containerPort: 6333
          name: http
        - containerPort: 6334
          name: grpc
        env:
        - name: QDRANT__SERVICE__HTTP_PORT
          value: "6333"
        - name: QDRANT__SERVICE__GRPC_PORT
          value: "6334"
        - name: QDRANT__STORAGE__STORAGE_PATH
          value: "/qdrant/storage"
        - name: QDRANT__CLUSTER__ENABLED
          value: "false"
        - name: QDRANT__TELEMETRY_DISABLED
          value: "true"
        volumeMounts:
        - name: qdrant-data
          mountPath: /qdrant/storage
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /healthz
            port: 6333
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 6333
          initialDelaySeconds: 45
          periodSeconds: 10
      volumes: []
  volumeClaimTemplates:
  - metadata:
      name: qdrant-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: qdrant-config
  namespace: quantum-data
  labels:
    app: qdrant
data:
  production.yaml: |
    log_level: INFO
    
    storage:
      storage_path: /qdrant/storage
      snapshots_path: /qdrant/snapshots
      on_disk_payload: true
      wal:
        wal_capacity_mb: 32
        wal_segments_ahead: 0
      performance:
        max_search_threads: 0
        max_optimization_threads: 0
      optimizers:
        deleted_threshold: 0.2
        vacuum_min_vector_number: 1000
        default_segment_number: 0
        indexing_threshold: 20000
        flush_interval_sec: 5
      hnsw_index:
        m: 16
        ef_construct: 100
        max_indexing_threads: 0
        on_disk: false
      quantization:
        scalar:
          type: int8
          quantile: 0.99
          always_ram: false
        product:
          compression: x4
          always_ram: false
    
    service:
      host: 0.0.0.0
      http_port: 6333
      grpc_port: 6334
      enable_cors: true
      enable_tls: false
      verify_https_client_certificate: false
      max_request_size_mb: 32
      max_workers: 0
      http_timeout_sec: 30

---
apiVersion: v1
kind: Service
metadata:
  name: weaviate
  namespace: quantum-data
  labels:
    app: weaviate
    component: vector-db
spec:
  selector:
    app: weaviate
  ports:
    - port: 8080
      targetPort: 8080
      name: http
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: weaviate
  namespace: quantum-data
  labels:
    app: weaviate
    component: vector-db
spec:
  serviceName: weaviate
  replicas: 1
  selector:
    matchLabels:
      app: weaviate
  template:
    metadata:
      labels:
        app: weaviate
    spec:
      containers:
      - name: weaviate
        image: semitechnologies/weaviate:1.22.5
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: QUERY_DEFAULTS_LIMIT
          value: "25"
        - name: AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED
          value: "true"
        - name: PERSISTENCE_DATA_PATH
          value: "/var/lib/weaviate"
        - name: DEFAULT_VECTORIZER_MODULE
          value: "none"
        - name: ENABLE_MODULES
          value: "text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai"
        - name: CLUSTER_HOSTNAME
          value: "weaviate"
        - name: CLUSTER_DATA_BIND_PORT
          value: "7101"
        - name: CLUSTER_GOSSIP_BIND_PORT
          value: "7100"
        - name: PROMETHEUS_MONITORING_ENABLED
          value: "true"
        volumeMounts:
        - name: weaviate-data
          mountPath: /var/lib/weaviate
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /v1/.well-known/ready
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /v1/.well-known/live
            port: 8080
          initialDelaySeconds: 45
          periodSeconds: 10
  volumeClaimTemplates:
  - metadata:
      name: weaviate-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi

---
# Backup job for vector databases
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vector-db-backup
  namespace: quantum-data
  labels:
    app: vector-backup
    component: backup
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: alpine/curl:8.5.0
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting vector database backup..."
              
              # Create backup directory
              mkdir -p /backup/$(date +%Y%m%d)
              
              # Backup Qdrant collections
              echo "Backing up Qdrant collections..."
              collections=$(curl -s http://qdrant.quantum-data.svc.cluster.local:6333/collections | grep -o '"name":"[^"]*"' | cut -d'"' -f4)
              for collection in $collections; do
                echo "Creating snapshot for collection: $collection"
                curl -X POST http://qdrant.quantum-data.svc.cluster.local:6333/collections/$collection/snapshots
              done
              
              # Backup Weaviate schema
              echo "Backing up Weaviate schema..."
              curl -s http://weaviate.quantum-data.svc.cluster.local:8080/v1/schema > /backup/$(date +%Y%m%d)/weaviate-schema.json
              
              echo "Backup completed successfully"
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
          restartPolicy: OnFailure
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: vector-backup-storage

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vector-backup-storage
  namespace: quantum-data
  labels:
    app: vector-backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi