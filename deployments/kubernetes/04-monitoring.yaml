apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: quantum-monitoring
  labels:
    app: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets: ['alertmanager:9093']
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
      
      - job_name: 'quantum-services'
        static_configs:
          - targets: 
              - 'quantum-gateway.quantum-services.svc.cluster.local:9090'
              - 'qagent.quantum-services.svc.cluster.local:9091'
              - 'qtest.quantum-services.svc.cluster.local:9092'
              - 'qsecure.quantum-services.svc.cluster.local:9093'
              - 'qsre.quantum-services.svc.cluster.local:9094'
              - 'qinfra.quantum-services.svc.cluster.local:9095'
      
      - job_name: 'vector-databases'
        static_configs:
          - targets:
              - 'qdrant.quantum-data.svc.cluster.local:6333'
              - 'weaviate.quantum-data.svc.cluster.local:8080'
        metrics_path: '/metrics'
      
      - job_name: 'postgresql'
        static_configs:
          - targets: ['postgresql.quantum-data.svc.cluster.local:5432']
      
      - job_name: 'redis'
        static_configs:
          - targets: ['redis.quantum-data.svc.cluster.local:6379']

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: quantum-monitoring
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
      name: prometheus
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: quantum-monitoring
  labels:
    app: prometheus
spec:
  serviceName: prometheus
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.48.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=30d'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: storage
          mountPath: /prometheus
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: config
        configMap:
          name: prometheus-config
  volumeClaimTemplates:
  - metadata:
      name: storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: quantum-monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: quantum-monitoring

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: quantum-monitoring
  labels:
    app: grafana
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    
    [grafana_net]
    url = https://grafana.net
    
    [log]
    mode = console
    
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: quantum-monitoring
  labels:
    app: grafana
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        orgId: 1
        url: http://prometheus.quantum-monitoring.svc.cluster.local:9090
        isDefault: true
        editable: true

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: quantum-monitoring
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      name: grafana
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: quantum-monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "quantum-admin"
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: quantum-monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: quantum-monitoring
  labels:
    app: jaeger
    component: collector
spec:
  selector:
    app: jaeger
    component: collector
  ports:
    - port: 14268
      targetPort: 14268
      name: http-thrift
    - port: 14250
      targetPort: 14250
      name: grpc
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: quantum-monitoring
  labels:
    app: jaeger
    component: query
spec:
  selector:
    app: jaeger
    component: query
  ports:
    - port: 16686
      targetPort: 16686
      name: query
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  namespace: quantum-monitoring
  labels:
    app: jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
        component: all-in-one
    spec:
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one:1.50
        ports:
        - containerPort: 16686
          name: query
        - containerPort: 14268
          name: http-thrift
        - containerPort: 14250
          name: grpc
        - containerPort: 6831
          name: jaeger-thrift
        - containerPort: 6832
          name: jaeger-binary
        - containerPort: 5778
          name: http-config
        env:
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        - name: SPAN_STORAGE_TYPE
          value: "memory"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"